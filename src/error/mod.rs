//! mussh Runtime Errors
use ssh2;
use std::error;
use std::fmt;
use std::io;

#[derive(Debug)]
/// Errors generated by the mussh at rumtime.
pub enum MusshErr {
    /// Thrown if the SSH2 session cannot be authenticated.
    Auth,
    /// Thrown if a valid cmd argument is not specified.
    InvalidCmd(String),
    /// Thrown if a valid hosts argument is not specified.
    InvalidHosts,
    /// Thrown if a valid SSH2 session cannot be created
    InvalidSshSession,
    /// Thown on I/O errors from std::io
    Io(io::Error),
    /// Thrown on a ssh2 error
    Ssh2(ssh2::Error),
    /// Unknown Error
    Unknown,
}

impl fmt::Display for MusshErr {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            MusshErr::Auth => write!(f, "Unable to authenticate SSH session"),
            MusshErr::InvalidCmd(ref c) => write!(f, "Invalid cmd argument: {}", c),
            MusshErr::InvalidHosts => write!(f, "Invalid hosts argument"),
            MusshErr::InvalidSshSession => write!(f, "Invalid SSH Session"),
            MusshErr::Io(ref e) => write!(f, "{}", e),
            MusshErr::Ssh2(ref e) => write!(f, "{}", e),
            MusshErr::Unknown => write!(f, "Unknown error"),
        }
    }
}

impl error::Error for MusshErr {
    fn description(&self) -> &str {
        match *self {
            MusshErr::Auth => "Unable to authenticate SSH session",
            MusshErr::InvalidCmd(_) => "Invalid cmd argument",
            MusshErr::InvalidHosts => "Invalid hosts argument",
            MusshErr::InvalidSshSession => "Invalid SSH Session",
            MusshErr::Io(ref e) => e.description(),
            MusshErr::Ssh2(ref e) => e.description(),
            MusshErr::Unknown => "Unknown error",
        }
    }

    fn cause(&self) -> Option<&error::Error> {
        match *self {
            MusshErr::Auth |
            MusshErr::InvalidCmd(_) |
            MusshErr::InvalidHosts |
            MusshErr::InvalidSshSession |
            MusshErr::Unknown => None,
            MusshErr::Io(ref e) => Some(e),
            MusshErr::Ssh2(ref e) => Some(e),
        }
    }
}

impl From<io::Error> for MusshErr {
    fn from(e: io::Error) -> MusshErr {
        MusshErr::Io(e)
    }
}

impl From<ssh2::Error> for MusshErr {
    fn from(e: ssh2::Error) -> MusshErr {
        MusshErr::Ssh2(e)
    }
}
